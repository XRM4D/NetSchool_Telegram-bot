import re
from datetime import datetime
import logging
from urllib.parse import urlparse
import requests
from cryptography.fernet import Fernet
from aiogram import Bot, Dispatcher, executor, types
from netschoolapi import NetSchoolAPI, errors
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
import sqlite3

cipher = Fernet('FERNET_TOKEN')

bot = Bot(token='BOT_TOKEN', parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)


def get_keyboard():
    '''–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'''
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(types.KeyboardButton('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'))
    return kb


def get_cancel():
    '''–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã'''
    return types.ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton('/cancel'))


class Standard(StatesGroup):
    '''–ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–∫–æ—è'''
    standard = State()


class Registrations(StatesGroup):
    '''–ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'''
    waiting_for_url = State()
    waiting_for_login = State()
    waiting_for_password = State()
    waiting_for_school = State()
    confirm_school = State()
    finishing_registration = State()


class Settings(StatesGroup):
    '''–ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫'''
    menu = State()
    delete_account = State()
    author = State()
    auto_alert = State()


def get_kb_stand():
    '''–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞'''
    buttons = ['üïí–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤']
    buttons1 = ['üìñ–î–æ–º–∞—à–∫–∞']
    buttons2 = ['‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∏']

    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(*buttons)
    kb.add(*buttons1)
    kb.add(*buttons2)
    return kb


class Functions:

    def __init__(self, id_user):
        self.id_user = id_user

    def get_user_data(self):
        try:
            sqlite_connection = sqlite3.connect('data_base.db')
            cursor = sqlite_connection.cursor()

            sql_select_query = """select * from users_data_base where id = ?"""
            cursor.execute(sql_select_query, (self.id_user,))
            records = cursor.fetchall()

            for row in records:
                url = row[3]
                login = str(row[4])
                password = str(row[5])
                school = row[6]

            login = login[2:len(login) - 1]
            password = password[2:len(password) - 1]

            login_de = cipher.decrypt(login, ttl=None).decode('utf-8')
            password_de = cipher.decrypt(password, ttl=None).decode('utf-8')

            return [url, login_de, password_de, school]

        except sqlite_connection.Error as error:
            print(error, datetime.today(), ' ', datetime.time())

    def delete_user_data(self):

        sqlite_connection = sqlite3.connect('data_base.db')
        cursor = sqlite_connection.cursor()

        sql_select_query = """DELETE FROM users_data_base WHERE id = ?"""
        cursor.execute(sql_select_query, (self.id_user,))
        sqlite_connection.commit()
        cursor.close()

    async def get_schedule(self, day_int, day):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""

        func = Functions(id_user=self.id_user)
        auth = func.get_user_data()

        try:
            ns = NetSchoolAPI(auth[0])
            await ns.login(
                auth[1],
                auth[2],
                auth[3]
            )
            tmp = await ns.diary()

            schedule_data = tmp.schedule[day_int]
            null = [f'–í–æ—Ç –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}:\n']

            six_days = len(tmp.schedule) > 5

            for lesson in schedule_data.lessons:
                start = str(lesson.start)
                end = str(lesson.end)
                l1 = len(start)
                l2 = len(end)

                start_n = start[:l1 - 3]
                end_n = end[:l2 - 3]
                ex = str(lesson.number) + ") " + lesson.subject + " " + f"<b>{start_n}</b>" + " - " + f"<b>{end_n}</b>"
                null.append(ex)
            await ns.logout()

            return [null, six_days]
        except IndexError:
            return [[f'–†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ {day} –Ω–µ—Ç'], True]

    async def get_homework(self, day_int, day):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""

        func = Functions(id_user=self.id_user)
        auth = func.get_user_data()

        try:
            ns = NetSchoolAPI(auth[0])
            await ns.login(
                auth[1],
                auth[2],
                auth[3]
            )
            tmp = await ns.diary()

            schedule_data = tmp.schedule[day_int]
            null = [f'–í–æ—Ç –í–∞—à–∞ –¥–æ–º–∞—à–∫–∞ –Ω–∞ {day}:\n']

            six_days = len(tmp.schedule) > 5

            for lesson in schedule_data.lessons:

                if len(lesson.assignments) != 0:
                    name = lesson.subject
                    homework_data = lesson.assignments[0].content
                    comment = lesson.assignments[0].comment
                    is_duty = lesson.assignments[0].is_duty
                    number = str(lesson.number)

                    ex = number + ') ' + f"<b><u>{name}</u></b>" + '\n' + f"<i>{homework_data}</i>\n"
                    if comment != '':
                        ex += f'<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç —É—á–∏—Ç–µ–ª—è:</b> {comment}\n'
                    if is_duty:
                        ex += f"‚ùó<b>–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫ —Å–¥–∞—á–µ</b>\n"
                    null.append(ex)

            await ns.logout()
            return [null, six_days]
        except IndexError:
            return [[f'–î–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ {day} –Ω–µ—Ç'], True]


@dp.message_handler(commands='start', state="*")
async def start(message: types.Message):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start'''
    conn = sqlite3.connect('data_base.db')
    cursor = conn.cursor()

    cursor.execute("SELECT id FROM users_data_base WHERE id = ?", (message.from_user.id,))

    if cursor.fetchone() is None:

        await message.answer(text="–ü—Ä–∏–≤–µ—Ç!")

        await message.answer(text="–≠—Ç–æ Telegram –±–æ—Ç, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–≥–æ –í—ã –º–æ–∂–µ—Ç–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –í–∞—à–∏–º–∏ –æ—Ü–µ–Ω–∫–∞–º–∏ –¥–∞–∂–µ"
                                  " –Ω–µ –∑–∞—Ö–æ–¥—è –≤ –°–µ—Ç–µ–≤–æ–π –≥–æ—Ä–æ–¥")

        await message.answer(text="–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É‚¨á",
                             reply_markup=get_keyboard())
    else:
        await message.reply(text="–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —è —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª")
        await message.answer(text="–ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º", reply_markup=get_kb_stand())
        await Standard.standard.set()


@dp.message_handler(commands=['cancel'], state=Registrations)
async def cmd_cancel(message: types.Message, state: FSMContext):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã'''
    current_state = await state.get_state()
    if current_state is None:
        return

    await message.reply('–•–æ—Ä–æ—à–æ, –∫–∞–∫ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è - –Ω–∞–ø–∏—à–∏—Ç–µ)',
                        reply_markup=get_keyboard())
    await state.finish()


@dp.message_handler(Text(equals='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', ignore_case=True), state=None)
async def registration(message: types.message):
    '''–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'''
    await message.reply(text="–•–æ—Ä–æ—à–æ", reply_markup=get_cancel())

    await message.answer(text="–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–∞–¥—Ä–µ—Å –°–µ—Ç–µ–≤–æ–≥–æ –ì–æ—Ä–æ–¥–∞:")
    await Registrations.waiting_for_url.set()


@dp.message_handler(lambda message: message.text, content_types=['text'], state=Registrations.waiting_for_url)
async def enter_login(message: types.Message, state: FSMContext):
    '''–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ URL'''
    async with state.proxy() as DATA:
        try:
            url_sgo = message.text
            http = re.search('http://', url_sgo)

            if http == None:
                http = re.search('https://', url_sgo)
                if http == None:
                    url_sgo = "https://" + url_sgo

            parsed = urlparse(url_sgo)
            url = f"http://{parsed.netloc}"
            requests.get(url)
            DATA['url'] = url

            await Registrations.next()

            await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—Ç–µ –º–Ω–µ –í–∞—à –ª–æ–≥–∏–Ω –æ—Ç –¥–Ω–µ–≤–Ω–∏–∫–∞:")
        except requests.exceptions.ConnectionError:
            await bot.send_message(chat_id=message.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞!')


@dp.message_handler(lambda message: message.text, content_types=['text'], state=Registrations.waiting_for_login)
async def enter_login(message: types.message, state: FSMContext):
    '''–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞'''
    async with state.proxy() as DATA:
        DATA['login'] = message.text

    await Registrations.next()

    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –í–∞—à –ø–∞—Ä–æ–ª—å:")
    await message.answer("–ú–æ–∂–µ—Ç–µ –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è –∑–∞ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö, —è –∏—Ö —à–∏—Ñ—Ä—É—é —Ç–∞–∫,"
                         " —á—Ç–æ –¥–∞–∂–µ –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –∏—Ö –ø—Ä–æ—á–∏—Ç–∞—Ç—å")


@dp.message_handler(lambda message: message.text, content_types=['text'], state=Registrations.waiting_for_password)
async def enter_password(message: types.message, state: FSMContext):
    '''–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è'''
    async with state.proxy() as DATA:
        DATA['password'] = message.text

    await Registrations.next()
    await bot.send_message(chat_id=message.from_user.id, text='–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –Ω–æ–º–µ—Ä –í–∞—à–µ–π —à–∫–æ–ª—ã:')


@dp.message_handler(lambda message: message.text, content_types=['text'], state=Registrations.waiting_for_school)
async def enter_school_finish(message: types.message, state: FSMContext):
    '''–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —à–∫–æ–ª—ã'''
    async with state.proxy() as DATA:
        try:
            parsed = DATA['url']

            url = f"{parsed}/webapi/schools/search?name={message.text}"

            response = requests.get(url)

            data_school = response.json()[0]['shortName']

            DATA['school'] = data_school
            await message.answer(f'–í–∞—à–∞ —à–∫–æ–ª–∞: {data_school}')

            await message.answer('–í–µ—Ä–Ω–æ?', reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True)
                                 .add(types.KeyboardButton('–î–∞'), types.KeyboardButton('–ù–µ—Ç')))
            await Registrations.next()
        except IndexError:
            await bot.send_message(chat_id=message.from_user.id, text='–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–π —à–∫–æ–ª—ã(')
            await bot.send_message(chat_id=message.from_user.id, text='–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —à–∫–æ–ª—ã –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ'
                                                                      ' –µ–≥–æ –º–Ω–µ –∑–∞–Ω–æ–≤–æ‚¨á')


@dp.message_handler(lambda message: message.text, content_types=['text'], state=Registrations.confirm_school)
async def confirm_school(message: types.Message, state: FSMContext):
    if message.text == '–î–∞':
        async with state.proxy() as DATA:
            await bot.send_message(chat_id=message.from_user.id,
                                   text="–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n"
                                        f"–ê–¥—Ä–µ—Å —Å–∞–π—Ç–∞: <b>{DATA['url']}</b>\n–õ–æ–≥–∏–Ω: <b>{DATA['login']}</b>\n"
                                        f"–ü–∞—Ä–æ–ª—å: <b>{DATA['password']}</b>\n–®–∫–æ–ª–∞: <b>{DATA['school']}</b>")
            await bot.send_message(chat_id=message.from_user.id,
                                   text="–í—Å—ë –≤–µ—Ä–Ω–æ?",
                                   reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True)
                                   .add(types.KeyboardButton('–î–∞'), types.KeyboardButton('–ù–µ—Ç')))
        await Registrations.next()
    elif message.text == '–ù–µ—Ç':
        await Registrations.waiting_for_school.set()
        await message.answer('–¢–æ–≥–¥–∞ —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π —à–∫–æ–ª—ã', reply_markup=get_cancel())
    else:
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ‚¨á')


@dp.message_handler(lambda message: message.text == '–ù–µ—Ç', content_types=['text'],
                    state=Registrations.finishing_registration)
async def incorrect_data(message: types.message):
    '''–û—Ç–º–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'''
    await Registrations.waiting_for_url.set()
    await message.reply("–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –∞–¥—Ä–µ—Å –°–µ—Ç–µ–≤–æ–≥–æ –ì–æ—Ä–æ–¥–∞", reply_markup=get_cancel())


@dp.message_handler(lambda message: message.text == '–î–∞', content_types=['text'],
                    state=Registrations.finishing_registration)
async def finishing_registration(message: types.message, state: FSMContext):
    """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–Ω–æ—Å –∏—Ö –≤ –ë–î"""
    async with state.proxy() as DATA:
        login_utf = DATA['login'].encode('utf-8')
        password_utf = DATA['password'].encode('utf-8')
        login_hash = cipher.encrypt(login_utf)
        password_hash = cipher.encrypt(password_utf)

        sqlite_connections = sqlite3.connect('data_base.db')
        cursor = sqlite_connections.cursor()
        sqlite_insert_query = f'''INSERT INTO users_data_base

                                VALUES 
                                ({message.from_user.id}, '{message.from_user.username}', '{datetime.today()}',
                                '{DATA['url']}', "{login_hash}", "{password_hash}", '{DATA['school']}', '0')'''
        cursor.execute(sqlite_insert_query)
        sqlite_connections.commit()
        cursor.close()

    await message.reply(text='–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ –∏ –±–æ—Ç –í–∞–º –æ—Ç–≤–µ—Ç–∏—Ç',
                        reply_markup=get_kb_stand())
    await bot.send_message(chat_id=message.from_user.id,
                           text='–¢–∞–∫ –∂–µ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –±—É–¥–µ—Ç –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É')
    await bot.send_message(chat_id=message.from_user.id, text='‚¨á')
    await Standard.standard.set()


def kb_schedule(six_days):
    """–ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    buttons = [
        types.InlineKeyboardButton('–ü–Ω', callback_data='schedule_monday'),
        types.InlineKeyboardButton('–í—Ç', callback_data='schedule_tuesday'),
        types.InlineKeyboardButton('–°—Ä', callback_data='schedule_wednesday'),
        types.InlineKeyboardButton('–ß—Ç', callback_data='schedule_thursday'),
        types.InlineKeyboardButton('–ü—Ç', callback_data='schedule_friday')
    ]
    if six_days:
        buttons.append(types.InlineKeyboardButton('–°–±', callback_data='schedule_saturday'))
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    keyboard.add(*buttons)
    return keyboard


def kb_homework(six_days):
    '''–ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã'''
    buttons = [
        types.InlineKeyboardButton('–ü–Ω', callback_data='homework_monday'),
        types.InlineKeyboardButton('–í—Ç', callback_data='homework_tuesday'),
        types.InlineKeyboardButton('–°—Ä', callback_data='homework_wednesday'),
        types.InlineKeyboardButton('–ß—Ç', callback_data='homework_thursday'),
        types.InlineKeyboardButton('–ü—Ç', callback_data='homework_friday')
    ]
    if six_days:
        buttons.append(types.InlineKeyboardButton('–°–±', callback_data='homework_saturday'))
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    keyboard.add(*buttons)
    return keyboard


@dp.message_handler(lambda message: message.text == 'üïí–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤', content_types=['text'],
                    state=Standard.standard)
async def schedule(message: types.message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤ Telegram"""
    func = Functions(message.from_user.id)

    day = datetime.today().weekday()
    if day == 0:
        weekday = 1
        text = '–≤—Ç–æ—Ä–Ω–∏–∫'
    elif day == 1:
        weekday = 2
        text = '—Å—Ä–µ–¥—É'
    elif day == 2:
        weekday = 3
        text = '—á–µ—Ç–≤–µ—Ä–≥'
    elif day == 3:
        weekday = 4
        text = '–ø—è—Ç–Ω–∏—Ü—É'
    elif day == 4 or 5 or 6:
        weekday = 0
        text = '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'

    try:
        data_tg = await func.get_schedule(weekday, text)
        await bot.send_message(chat_id=message.from_user.id, text='\n'.join(map(str, data_tg[0])),
                               reply_markup=kb_schedule(data_tg[1]))
    except errors.AuthError:
        await message.answer('–í—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ')
        await message.answer('–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:', reply_markup=types.
                             ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')))
        await state.finish()

        try:
            func.delete_user_data()

        except sqlite_connection.Error as error:
            print('–±–±, —Å –î–ë —Ç—Ä–∞–±–ª ', datetime.today(), ' ', datetime.time())
            await bot.send_message(chat_id=message.from_user.id, text='–£ –±–æ—Ç–∞ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –¥–ª—è –µ—ë —Ä–µ—à–µ–Ω–∏—è'
                                                                      ' –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É https://t.me/mirnsknight'
                                                                      ' —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏:'
                                                                      f'{error}')


async def edit_message(message: types.Message, new_schedule: str, six_days, type_work):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if type_work == 'schedule':
        await message.edit_text(new_schedule, reply_markup=kb_schedule(six_days))
    elif type_work == 'homework':
        await message.edit_text(new_schedule, reply_markup=kb_homework(six_days))


@dp.callback_query_handler(Text(startswith='schedule_'), state=Standard.standard)
async def callbacks_schedule(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–æ–≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""

    func = Functions(call.from_user.id)

    day = call.data.split('_')[1]

    if day == 'monday':

        data_diary = await func.get_schedule(0, '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
        await edit_message(call.message, '\n'.join(map(str, data_diary[0])), six_days=data_diary[1],
                           type_work='schedule')

    elif day == 'tuesday':

        data_diary = await func.get_schedule(1, '–≤—Ç–æ—Ä–Ω–∏–∫')
        await edit_message(call.message, '\n'.join(map(str, data_diary[0])), six_days=data_diary[1],
                           type_work='schedule')

    elif day == 'wednesday':

        data_diary = await func.get_schedule(2, '—Å—Ä–µ–¥—É')
        await edit_message(call.message, '\n'.join(map(str, data_diary[0])), six_days=data_diary[1],
                           type_work='schedule')

    elif day == 'thursday':

        data_diary = await func.get_schedule(3, '—á–µ—Ç–≤–µ—Ä–≥')
        await edit_message(call.message, '\n'.join(map(str, data_diary[0])), six_days=data_diary[1],
                           type_work='schedule')

    elif day == 'friday':

        data_diary = await func.get_schedule(4, '–ø—è—Ç–Ω–∏—Ü—É')
        await edit_message(call.message, '\n'.join(map(str, data_diary[0])), six_days=data_diary[1],
                           type_work='schedule')

    elif day == 'saturday':

        data_diary = await func.get_schedule(5, '—Å—É–±–±–æ—Ç—É')
        await edit_message(call.message, '\n'.join(map(str, data_diary[0])), six_days=data_diary[1],
                           type_work='schedule')


@dp.message_handler(lambda message: message.text == 'üìñ–î–æ–º–∞—à–∫–∞', content_types=['text'], state=Standard.standard)
async def homework(message: types.message, state: FSMContext):
    '''–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ Telegram'''

    day = datetime.today().weekday()
    if day == 0:
        weekday = 1
        text = '–≤—Ç–æ—Ä–Ω–∏–∫'
    elif day == 1:
        weekday = 2
        text = '—Å—Ä–µ–¥—É'
    elif day == 2:
        weekday = 3
        text = '—á–µ—Ç–≤–µ—Ä–≥'
    elif day == 3:
        weekday = 4
        text = '–ø—è—Ç–Ω–∏—Ü—É'
    elif day == 4 or 5 or 6:
        weekday = 0
        text = '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫'

    func = Functions(message.from_user.id)

    try:
        data_diary = await func.get_homework(weekday, text)
        if len(data_diary[0]) > 1:
            await bot.send_message(chat_id=message.from_user.id, text='\n'.join(map(str, data_diary[0])),
                                   reply_markup=kb_homework(six_days=data_diary[1]))
        else:
            await bot.send_message(chat_id=message.from_user.id, text=data_diary[0][0],
                                   reply_markup=kb_homework(six_days=data_diary[1]))

    except errors.AuthError:

        await message.answer('–¢—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤—ë–ª –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å, –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ')
        await message.answer('–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:', reply_markup=types.
                             ReplyKeyboardMarkup(resize_keyboard=True).add(types.KeyboardButton('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')))
        await state.finish()

        try:
            func.delete_user_data()

        except sqlite_connection.Error as error:
            print('–±–±, —Å –î–ë —Ç—Ä–∞–±–ª ', datetime.today(), ' ', datetime.time())
            await bot.send_message(chat_id=message.from_user.id, text='–£ –±–æ—Ç–∞ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –¥–ª—è –µ—ë —Ä–µ—à–µ–Ω–∏—è'
                                                                      ' –æ—Ç–ø—Ä–∞–≤—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É ....'
                                                                      ' —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏:'
                                                                      f'{error}')


@dp.callback_query_handler(Text(startswith='homework_'), state=Standard.standard)
async def callbacks_homework(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–æ–≤ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""

    func = Functions(call.from_user.id)

    day_call = call.data.split("_")[1]

    if day_call == 'monday':

        data_diary = await func.get_homework(0, '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')

        if len(data_diary[0]) > 1:
            await edit_message(call.message, '\n'.join(map(str, data_diary[0])), six_days=data_diary[1],
                               type_work='homework')
        else:
            await edit_message(call.message, f'–î–æ–º–∞—à–∫–∏ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –Ω–µ—Ç', six_days=data_diary[1],
                               type_work='homework')

    elif day_call == 'tuesday':

        data_diary = await func.get_homework(1, '–≤—Ç–æ—Ä–Ω–∏–∫')

        if len(data_diary[0]) > 1:
            await edit_message(call.message, '\n'.join(map(str, data_diary[0])), six_days=data_diary[1],
                               type_work='homework')
        else:
            await edit_message(call.message, f'–î–æ–º–∞—à–∫–∏ –Ω–∞ –≤—Ç–æ—Ä–Ω–∏–∫ –Ω–µ—Ç', six_days=data_diary[1],
                               type_work='homework')

    elif day_call == 'wednesday':

        data_diary = await func.get_homework(2, '—Å—Ä–µ–¥—É')

        if len(data_diary[0]) > 1:
            await edit_message(call.message, '\n'.join(map(str, data_diary[0])), six_days=data_diary[1],
                               type_work='homework')
        else:
            await edit_message(call.message, f'–î–æ–º–∞—à–∫–∏ –Ω–∞ —Å—Ä–µ–¥—É –Ω–µ—Ç', six_days=data_diary[1], type_work='homework')

    elif day_call == 'thursday':

        data_diary = await func.get_homework(3, '—á–µ—Ç–≤–µ—Ä–≥')

        if len(data_diary[0]) > 1:
            await edit_message(call.message, '\n'.join(map(str, data_diary[0])), six_days=data_diary[1],
                               type_work='homework')
        else:
            await edit_message(call.message, f'–î–æ–º–∞—à–∫–∏ –Ω–∞ —á–µ—Ç–≤–µ—Ä–≥ –Ω–µ—Ç', six_days=data_diary[1],
                               type_work='homework')

    elif day_call == 'friday':

        data_diary = await func.get_homework(4, '–ø—è—Ç–Ω–∏—Ü—É')

        if len(data_diary[0]) > 1:
            await edit_message(call.message, '\n'.join(map(str, data_diary[0])), six_days=data_diary[1],
                               type_work='homework')
        else:
            await edit_message(call.message, f'–î–æ–º–∞—à–∫–∏ –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É –Ω–µ—Ç', six_days=data_diary[1],
                               type_work='homework')

    elif day_call == 'saturday':

        data_diary = await func.get_homework(5, '—Å—Ä–µ–¥—É')

        if len(data_diary[0]) > 1:
            await edit_message(call.message, '\n'.join(map(str, data_diary[0])), six_days=data_diary[1],
                               type_work='homework')
        else:
            await edit_message(call.message, f'–î–æ–º–∞—à–∫–∏ –Ω–∞ —Å—É–±–±–æ—Ç—É –Ω–µ—Ç', six_days=data_diary[1],
                               type_work='homework')


def kb_settings():
    '''–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫'''
    buttons = [types.KeyboardButton('üóë–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')]
    buttons2 = [types.KeyboardButton('üè´–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∫–æ–ª–µ')]
    buttons3 = [types.KeyboardButton('üë§–ê–≤—Ç–æ—Ä'),
                types.KeyboardButton('‚Ü©–ù–∞–∑–∞–¥')]
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(*buttons)
    kb.add(*buttons2)
    kb.add(*buttons3)
    return kb


@dp.message_handler(lambda message: message.text == '‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∏', content_types=['text'], state='*')
async def settings(message: types.Message):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫'''
    await Settings.menu.set()
    await message.answer(text="–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=kb_settings())


def kb_confirm():
    '''–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞'''
    buttons = [types.KeyboardButton('üö´–ù–µ—Ç, —è —Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º')]
    buttons1 = [types.KeyboardButton('–î–∞, —É–¥–∞–ª–∏—Ç—å –º–æ–π –∞–∫–∫–∞—É–Ω—Ç')]
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(*buttons)
    kb.add(*buttons1)
    return kb


@dp.message_handler(lambda message: message.text == 'üóë–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', content_types=['text'], state=Settings.menu)
async def confirm_deleting(message: types.Message):
    '''–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞'''
    await Settings.delete_account.set()
    await message.answer('–¢—ã —É–≤–µ—Ä–µ–Ω —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏ —Å—Ç–µ—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–±–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö?',
                         reply_markup=kb_confirm())


@dp.message_handler(lambda message: message.text == '–î–∞, —É–¥–∞–ª–∏—Ç—å –º–æ–π –∞–∫–∫–∞—É–Ω—Ç', content_types=['text'],
                    state=Settings.delete_account)
async def deleting(message: types.Message, state: FSMContext):
    '''–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞'''
    await message.answer('–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ —Ç—ã –ø–æ–∫–∏–¥–∞–µ—à—å –º–µ–Ω—èüòì')
    await message.answer('–Ø —É–∂–µ —Å—Ç—ë—Ä —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–≤–æ–µ–π –±–∞–∑—ã')
    await message.answer('–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è - –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É /start –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, —è —Ç–µ–±–µ –æ—Ç–≤–µ—á—É)',
                         reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True)
                         .add(types.KeyboardButton('/start')))
    await state.finish()

    try:
        func = Functions(message.from_user.id)
        func.delete_user_data()

    except sqlite_connection.Error as error:
        print('–±–±, —Å –î–ë —Ç—Ä–∞–±–ª ', datetime.today(), ' ', datetime.time())
        await bot.send_message(chat_id=message.from_user.id, text='–£ –±–æ—Ç–∞ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –¥–ª—è –µ—ë —Ä–µ—à–µ–Ω–∏—è'
                                                                  ' –æ—Ç–ø—Ä–∞–≤—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É ....'
                                                                  ' —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏:'
                                                                  f'{error}')


@dp.message_handler(lambda message: message.text == 'üö´–ù–µ—Ç, —è —Ö–æ—á—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º',
                    content_types=['text'], state=Settings.delete_account)
async def deleting_not(message: types.Message):
    '''–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞'''
    await message.answer('–Ø –æ—á–µ–Ω—å —Ä–∞–¥, —á—Ç–æ —Ç—ã –ø—Ä–∏–Ω—è–ª —Ç–∞–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ)', reply_markup=kb_settings())
    await Settings.menu.set()


@dp.message_handler(lambda message: message.text == '‚Ü©–ù–∞–∑–∞–¥', content_types=['text'],
                    state=Settings)
async def back(message: types.Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ "–ù–∞–∑–∞–¥\""""
    type_state = str(await state.get_state())

    if type_state == 'Settings:menu':
        await Standard.standard.set()
        await message.answer('–ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏:', reply_markup=get_kb_stand())

    elif type_state == 'Settings:author':
        await Settings.menu.set()
        await message.answer('–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:', reply_markup=kb_settings())


@dp.message_handler(lambda message: message.text == 'üè´–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∫–æ–ª–µ', content_types=['text'], state=Settings.menu)
async def school_about(message: types.Message):
    func = Functions(message.from_user.id)
    data = func.get_user_data()

    ns = NetSchoolAPI(data[0])

    await ns.login(
        data[1],
        data[2],
        data[3]
    )

    tmp = await ns.school()

    await ns.logout()

    school_txt = ['<b>–í–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–π —à–∫–æ–ª–µ:</b>\n']

    if tmp.name != '':
        school_txt.append('<b>–ù–∞–∑–≤–∞–Ω–∏–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è:</b>')
        school_txt.append(f'{tmp.name}\n')

    if tmp.about != '':
        school_txt.append('<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>')
        school_txt.append(f'{tmp.about}\n')

    if tmp.address != '':
        school_txt.append('<b>–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∞–¥—Ä–µ—Å:</b>')
        address_split = tmp.address.split(',')
        school_txt.append(f"{address_split[1][1:] + ' ' + address_split[2] + ',' + address_split[3]}\n")

    if tmp.director != '':
        school_txt.append('<b>–î–∏—Ä–µ–∫—Ç–æ—Ä —à–∫–æ–ª—ã:</b>')
        school_txt.append(f'{tmp.director}\n')

    if tmp.AHC != '':
        school_txt.append('<b>–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ —à–∫–æ–ª—ã –ø–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ-—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–π —á–∞—Å—Ç–∏:</b>')
        school_txt.append(f'{tmp.AHC}\n')

    if tmp.UVR != '':
        school_txt.append('<b>–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ —à–∫–æ–ª—ã –ø–æ —É—á–µ–±–Ω–æ-–≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ:</b>')
        school_txt.append(f'{tmp.UVR}\n')

    if tmp.phone != '':
        school_txt.append('<b>–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞:</b>')
        school_txt.append(f'<code>{tmp.email}</code>\n')

    if tmp.email != '':
        school_txt.append('<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b>')
        school_txt.append(f'<code>{tmp.phone}</code>\n')

    kb = types.InlineKeyboardMarkup()

    if tmp.site != '':
        button1 = types.InlineKeyboardButton(text='–°–∞–π—Ç —à–∫–æ–ª—ã', url=tmp.site)
        kb.add(button1)

    await message.answer('\n'.join(map(str, school_txt)), reply_markup=kb)


def kb_author():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –∞–≤—Ç–æ—Ä–∞"""
    buttons = [types.KeyboardButton('üí∏–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞')]
    buttons1 = [types.KeyboardButton('‚Ü©–ù–∞–∑–∞–¥')]
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(*buttons)
    kb.add(*buttons1)
    return kb


@dp.message_handler(lambda message: message.text == 'üë§–ê–≤—Ç–æ—Ä', content_types=['text'], state=Settings.menu)
async def author(message: types.Message):
    """–ú–µ–Ω—é –∞–≤—Ç–æ—Ä–∞"""
    await message.answer('.....', reply_markup=kb_author())

    await Settings.author.set()


@dp.message_handler(lambda message: message.text == 'üí∏–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞', content_types=['text'],
                    state=Settings.author)
async def author(message: types.Message):
    '''–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞'''
    await message.answer('....')


@dp.message_handler(commands=['help'], state="*")
async def help_command(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id, text='–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'
                                                              ' –æ –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–∞–∂–µ –Ω–µ –∑–∞—Ö–æ–¥—è –Ω–∞ —Å–∞–π—Ç'
                                                              ' –°–µ—Ç–µ–≤–æ–≥–æ –≥–æ—Ä–æ–¥–∞')
    await bot.send_message(chat_id=message.from_user.id, text='–¢–∞–∫-–∂–µ –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ –≤–≤–µ–¥–∏'
                                                              ' –∫–æ–º–∞–Ω–¥—É /restart \n(–∏–Ω–æ–≥–¥–∞ –±–æ—Ç–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é—Ç –∏'
                                                              ' –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª–µ—Ç–∞–µ—Ç)')
    await bot.send_message(chat_id=message.from_user.id, text='PS: –µ—Å–ª–∏ —á—Ç–æ –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å –∫ –Ω–µ–π –≤ –º–µ–Ω—é')
    await bot.send_message(chat_id=message.from_user.id, text='‚¨á')


@dp.message_handler(commands=['restart'], state="*")
async def restart_command(message: types.Message):
    await message.answer(text="–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω‚úÖ", reply_markup=get_kb_stand())
    await Standard.standard.set()


if __name__ == "__main__":
    executor.start_polling(dp,
                           skip_updates=True)
